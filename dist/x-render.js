!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.XRender=e():t.XRender=e()}(window,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=3)}([function(t,e,r){(function(t,e){
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r;!function(r){!function(n){var o="object"==typeof e?e:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),i=u(r);function u(t,e){return function(r,n){"function"!=typeof t[r]&&Object.defineProperty(t,r,{configurable:!0,writable:!0,value:n}),e&&e(r,n)}}void 0===o.Reflect?o.Reflect=r:i=u(o.Reflect,i),function(e){var r=Object.prototype.hasOwnProperty,n="function"==typeof Symbol,o=n&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=n&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",u="function"==typeof Object.create,s={__proto__:[]}instanceof Array,c=!u&&!s,a={create:u?function(){return L(Object.create(null))}:s?function(){return L({__proto__:null})}:function(){return L({})},has:c?function(t,e){return r.call(t,e)}:function(t,e){return e in t},get:c?function(t,e){return r.call(t,e)?t[e]:void 0}:function(t,e){return t[e]}},f=Object.getPrototypeOf(Function),h="object"==typeof t&&t.env&&"true"===t.env.REFLECT_METADATA_USE_MAP_POLYFILL,l=h||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var t={},e=[],r=function(){function t(t,e,r){this._index=0,this._keys=t,this._values=e,this._selector=r}return t.prototype["@@iterator"]=function(){return this},t.prototype[i]=function(){return this},t.prototype.next=function(){var t=this._index;if(t>=0&&t<this._keys.length){var r=this._selector(this._keys[t],this._values[t]);return t+1>=this._keys.length?(this._index=-1,this._keys=e,this._values=e):this._index++,{value:r,done:!1}}return{value:void 0,done:!0}},t.prototype.throw=function(t){throw this._index>=0&&(this._index=-1,this._keys=e,this._values=e),t},t.prototype.return=function(t){return this._index>=0&&(this._index=-1,this._keys=e,this._values=e),{value:t,done:!0}},t}();return function(){function e(){this._keys=[],this._values=[],this._cacheKey=t,this._cacheIndex=-2}return Object.defineProperty(e.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),e.prototype.has=function(t){return this._find(t,!1)>=0},e.prototype.get=function(t){var e=this._find(t,!1);return e>=0?this._values[e]:void 0},e.prototype.set=function(t,e){var r=this._find(t,!0);return this._values[r]=e,this},e.prototype.delete=function(e){var r=this._find(e,!1);if(r>=0){for(var n=this._keys.length,o=r+1;o<n;o++)this._keys[o-1]=this._keys[o],this._values[o-1]=this._values[o];return this._keys.length--,this._values.length--,e===this._cacheKey&&(this._cacheKey=t,this._cacheIndex=-2),!0}return!1},e.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=t,this._cacheIndex=-2},e.prototype.keys=function(){return new r(this._keys,this._values,n)},e.prototype.values=function(){return new r(this._keys,this._values,o)},e.prototype.entries=function(){return new r(this._keys,this._values,u)},e.prototype["@@iterator"]=function(){return this.entries()},e.prototype[i]=function(){return this.entries()},e.prototype._find=function(t,e){return this._cacheKey!==t&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=t)),this._cacheIndex<0&&e&&(this._cacheIndex=this._keys.length,this._keys.push(t),this._values.push(void 0)),this._cacheIndex},e}();function n(t,e){return t}function o(t,e){return e}function u(t,e){return[t,e]}}():Map,p=h||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function t(){this._map=new l}return Object.defineProperty(t.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),t.prototype.has=function(t){return this._map.has(t)},t.prototype.add=function(t){return this._map.set(t,t),this},t.prototype.delete=function(t){return this._map.delete(t)},t.prototype.clear=function(){this._map.clear()},t.prototype.keys=function(){return this._map.keys()},t.prototype.values=function(){return this._map.values()},t.prototype.entries=function(){return this._map.entries()},t.prototype["@@iterator"]=function(){return this.keys()},t.prototype[i]=function(){return this.keys()},t}():Set,y=new(h||"function"!=typeof WeakMap?function(){var t=a.create(),e=n();return function(){function t(){this._key=n()}return t.prototype.has=function(t){var e=o(t,!1);return void 0!==e&&a.has(e,this._key)},t.prototype.get=function(t){var e=o(t,!1);return void 0!==e?a.get(e,this._key):void 0},t.prototype.set=function(t,e){return o(t,!0)[this._key]=e,this},t.prototype.delete=function(t){var e=o(t,!1);return void 0!==e&&delete e[this._key]},t.prototype.clear=function(){this._key=n()},t}();function n(){var e;do{e="@@WeakMap@@"+u()}while(a.has(t,e));return t[e]=!0,e}function o(t,n){if(!r.call(t,e)){if(!n)return;Object.defineProperty(t,e,{value:a.create()})}return t[e]}function i(t,e){for(var r=0;r<e;++r)t[r]=255*Math.random()|0;return t}function u(){var t,e=(t=16,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(t)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(t)):i(new Uint8Array(t),t):i(new Array(t),t));e[6]=79&e[6]|64,e[8]=191&e[8]|128;for(var r="",n=0;n<16;++n){var o=e[n];4!==n&&6!==n&&8!==n||(r+="-"),o<16&&(r+="0"),r+=o.toString(16).toLowerCase()}return r}}():WeakMap);function d(t,e,r){var n=y.get(t);if(b(n)){if(!r)return;n=new l,y.set(t,n)}var o=n.get(e);if(b(o)){if(!r)return;o=new l,n.set(e,o)}return o}function v(t,e,r){var n=d(e,r,!1);return!b(n)&&!!n.has(t)}function _(t,e,r){var n=d(e,r,!1);if(!b(n))return n.get(t)}function w(t,e,r,n){d(r,n,!0).set(t,e)}function g(t,e){var r=[],n=d(t,e,!1);if(b(n))return r;for(var o=function(t){var e=A(t,i);if(!j(e))throw new TypeError;var r=e.call(t);if(!x(r))throw new TypeError;return r}(n.keys()),u=0;;){var s=S(o);if(!s)return r.length=u,r;var c=s.value;try{r[u]=c}catch(t){try{P(o)}finally{throw t}}u++}}function m(t){if(null===t)return 1;switch(typeof t){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===t?1:6;default:return 6}}function b(t){return void 0===t}function T(t){return null===t}function x(t){return"object"==typeof t?null!==t:"function"==typeof t}function E(t,e){switch(m(t)){case 0:case 1:case 2:case 3:case 4:case 5:return t}var r=3===e?"string":5===e?"number":"default",n=A(t,o);if(void 0!==n){var i=n.call(t,r);if(x(i))throw new TypeError;return i}return function(t,e){if("string"===e){var r=t.toString;if(j(r))if(!x(o=r.call(t)))return o;if(j(n=t.valueOf))if(!x(o=n.call(t)))return o}else{var n;if(j(n=t.valueOf))if(!x(o=n.call(t)))return o;var o,i=t.toString;if(j(i))if(!x(o=i.call(t)))return o}throw new TypeError}(t,"default"===r?"number":r)}function k(t){var e=E(t,3);return"symbol"==typeof e?e:function(t){return""+t}(e)}function O(t){return Array.isArray?Array.isArray(t):t instanceof Object?t instanceof Array:"[object Array]"===Object.prototype.toString.call(t)}function j(t){return"function"==typeof t}function M(t){return"function"==typeof t}function A(t,e){var r=t[e];if(null!=r){if(!j(r))throw new TypeError;return r}}function S(t){var e=t.next();return!e.done&&e}function P(t){var e=t.return;e&&e.call(t)}function C(t){var e=Object.getPrototypeOf(t);if("function"!=typeof t||t===f)return e;if(e!==f)return e;var r=t.prototype,n=r&&Object.getPrototypeOf(r);if(null==n||n===Object.prototype)return e;var o=n.constructor;return"function"!=typeof o||o===t?e:o}function L(t){return t.__=void 0,delete t.__,t}e("decorate",(function(t,e,r,n){if(b(r)){if(!O(t))throw new TypeError;if(!M(e))throw new TypeError;return function(t,e){for(var r=t.length-1;r>=0;--r){var n=(0,t[r])(e);if(!b(n)&&!T(n)){if(!M(n))throw new TypeError;e=n}}return e}(t,e)}if(!O(t))throw new TypeError;if(!x(e))throw new TypeError;if(!x(n)&&!b(n)&&!T(n))throw new TypeError;return T(n)&&(n=void 0),function(t,e,r,n){for(var o=t.length-1;o>=0;--o){var i=(0,t[o])(e,r,n);if(!b(i)&&!T(i)){if(!x(i))throw new TypeError;n=i}}return n}(t,e,r=k(r),n)})),e("metadata",(function(t,e){return function(r,n){if(!x(r))throw new TypeError;if(!b(n)&&!function(t){switch(m(t)){case 3:case 4:return!0;default:return!1}}(n))throw new TypeError;w(t,e,r,n)}})),e("defineMetadata",(function(t,e,r,n){if(!x(r))throw new TypeError;return b(n)||(n=k(n)),w(t,e,r,n)})),e("hasMetadata",(function(t,e,r){if(!x(e))throw new TypeError;return b(r)||(r=k(r)),function t(e,r,n){if(v(e,r,n))return!0;var o=C(r);return!T(o)&&t(e,o,n)}(t,e,r)})),e("hasOwnMetadata",(function(t,e,r){if(!x(e))throw new TypeError;return b(r)||(r=k(r)),v(t,e,r)})),e("getMetadata",(function(t,e,r){if(!x(e))throw new TypeError;return b(r)||(r=k(r)),function t(e,r,n){if(v(e,r,n))return _(e,r,n);var o=C(r);return T(o)?void 0:t(e,o,n)}(t,e,r)})),e("getOwnMetadata",(function(t,e,r){if(!x(e))throw new TypeError;return b(r)||(r=k(r)),_(t,e,r)})),e("getMetadataKeys",(function(t,e){if(!x(t))throw new TypeError;return b(e)||(e=k(e)),function t(e,r){var n=g(e,r),o=C(e);if(null===o)return n;var i=t(o,r);if(i.length<=0)return n;if(n.length<=0)return i;for(var u=new p,s=[],c=0,a=n;c<a.length;c++){var f=a[c];u.has(f)||(u.add(f),s.push(f))}for(var h=0,l=i;h<l.length;h++){f=l[h];u.has(f)||(u.add(f),s.push(f))}return s}(t,e)})),e("getOwnMetadataKeys",(function(t,e){if(!x(t))throw new TypeError;return b(e)||(e=k(e)),g(t,e)})),e("deleteMetadata",(function(t,e,r){if(!x(e))throw new TypeError;b(r)||(r=k(r));var n=d(e,r,!1);if(b(n))return!1;if(!n.delete(t))return!1;if(n.size>0)return!0;var o=y.get(e);return o.delete(r),o.size>0||y.delete(e),!0}))}(i)}()}(r||(r={}))}).call(this,r(1),r(2))},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function s(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:u}catch(t){n=u}}();var c,a=[],f=!1,h=-1;function l(){f&&c&&(f=!1,c.length?a=c.concat(a):h=-1,a.length&&p())}function p(){if(!f){var t=s(l);f=!0;for(var e=a.length;e;){for(c=a,a=[];++h<e;)c&&c[h].run();h=-1,e=a.length}c=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===u||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function d(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];a.push(new y(t,e)),1!==a.length||f||s(p)},y.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=d,o.addListener=d,o.once=d,o.off=d,o.removeListener=d,o.removeAllListeners=d,o.emit=d,o.prependListener=d,o.prependOnceListener=d,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";r.r(e),r.d(e,"AdapterMapping",(function(){return l})),r.d(e,"default",(function(){return p})),r.d(e,"XComponent",(function(){return n})),r.d(e,"SVGAdapter",(function(){return h})),r.d(e,"XNode",(function(){return u})),r.d(e,"TextNode",(function(){return c}));r(0);class n{getPropertyDefinition(t){const e=Reflect.getMetadata(i,this);if(e&&e.has(t))return e.get(t);throw new Error(`Property ${t} not defined with decorator`)}}const o=new Map,i=Symbol("PropertyMapMetaKey");class u extends class{constructor(){}on(t,e){this._events.has(t)||this._events.set(t,new Set),this._events.get(t).add(e)}off(t,e){void 0!==e?this._events.has(t)&&this._events.get(t).has(e)&&this._events.get(t).delete(e):this._events.has(t)&&this._events.get(t).clear()}once(t,e){const r=(...n)=>{e(...n),this.off(t,r)};this.on(t,r)}emit(t,...e){this._events.has(t)&&this._events.get(t).forEach(t=>{t(...e)})}}{constructor(){super(...arguments),this.children=[]}setOptions(t){if(t&&(this.attrs=t.attrs,this.style=t.style,this.class=t.class,t.on))for(const e in t.on){const r=t.on[e];this.on(e,r)}}setChildren(t){t&&t.length&&t.forEach(t=>{this.children.push(t)})}addChild(t){t&&this.children.push(t)}removeChild(t){if(t){const e=this.children.indexOf(t);e>=0&&this.children.splice(e,1)}}}function s(t,e,r){if(!(this instanceof n))throw new Error("Create Element must be bound to XComponent instance");let i;i="string"==typeof t?o.get(t):t;let c=new i(e),a=c.render(s.bind(c));return a.setOptions(e),r&&r.length&&r.forEach(t=>{t instanceof u&&(t.parent=a)}),a.setChildren(r),a}class c extends u{constructor(t){super(),this.text=t}}class a{render(t,e,r,...n){let o;return t instanceof c&&(o=this.renderText(t,e,r)),o&&t.children.forEach((t,e)=>{t instanceof u?this.render(t,o,e):this.setText(t,o,e)}),o}}const f=t=>document.createElementNS("http://www.w3.org/2000/svg",t);class h extends a{initContainer(){return f("svg")}setText(t,e){e.textContent=t}renderText(t,e,...r){const n=f("text");var o,i;n.textContent=t.text,i=t,(o=n).setAttribute("style",(i.style,"")),o.setAttribute("class",(i.class,"")),e.appendChild(n)}}const l=new Map;l.set("svg",new h);class p{constructor(t){if(this.root=t.component,t.renderer instanceof a)this.adapter=t.renderer;else if("string"==typeof t.renderer&&(this.adapter=l.get(t.renderer),!this.adapter))throw new Error("Invalid renderer: "+t.renderer)}mount(t){const e=this.root.render(s.bind(this.root)),r=this.adapter.initContainer();this.adapter.render(e,r,0),t.appendChild(r)}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,